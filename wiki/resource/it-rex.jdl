// Example: https://medium.com/jhipster/create-full-microservice-stack-using-jhipster-domain-language-under-30-minutes-ecc6e7fc3f77
// Example: https://blog.codecentric.de/en/2020/05/kick-start-your-microservice-project-with-jhipster

application {
  config {
    baseName Gateway
    applicationType gateway
    packageName de.uni_stuttgart.it_rex.backend
    authenticationType oauth2
    serviceDiscoveryType eureka
    prodDatabaseType postgresql
    skipClient true
    testFrameworks [cucumber]
    buildTool gradle
    cacheProvider hazelcast
    devDatabaseType h2Disk
    nativeLanguage en
    languages [de]
    enableSwaggerCodegen true
    // otherModules [{"name": "generator-jhipster-testcontainers", "version": "1.1.0"},{"name": "generator-codegen", "version": "0.3.1"}]
  }
  entities *
}

application {
  config {
    baseName CourseService
    applicationType microservice
    packageName de.uni_stuttgart.it_rex.course
    authenticationType oauth2
    prodDatabaseType postgresql
    testFrameworks [cucumber]
    buildTool gradle
    cacheProvider hazelcast
    devDatabaseType h2Disk
    nativeLanguage en
    languages [de]
    serviceDiscoveryType eureka
    serverPort 8083
    skipUserManagement false
    enableSwaggerCodegen true
  }
  entities Course, Participation
}

application {
  config {
    baseName MediaService
    applicationType microservice
    packageName de.uni_stuttgart.it_rex.media
    authenticationType oauth2
    prodDatabaseType postgresql
    testFrameworks [cucumber]
    buildTool gradle
    cacheProvider hazelcast
    devDatabaseType h2Disk
    nativeLanguage en
    languages [de]
    serviceDiscoveryType eureka
    serverPort 8082
    skipUserManagement true
    enableSwaggerCodegen true
  }
  entities Media, Video
}
enum PARTICIPATIONTYPE {
	STUDENT,
  LECTURER,
  HIWI
}

entity Course {
	name String
  id UUID
  startDate LocalDate
  endDate LocalDate
  maxFoodSum Integer
  courseDescription TextBlob
}

entity Participation {
	type PARTICIPATIONTYPE
}

/*
entity Chapter {
	maxFoodSum Integer
}

entity Content { // Abstract
	order Integer
  foodReward Integer
  name String
  id UUID
  startDate LocalDate
  endData LocalDate
  referenceId UUID
}

entity Event (Content) {

}

entity Document (Content) {

}

entity LectureQuiz (Content) {

}
*/

enum MIMETYPE {
	VIDEO,
  IMAGE,
  AUDIO
}

entity Media{ // Abstract
  title String
  uploadDate LocalDate
  mimeType MIMETYPE
  format String
  location String
}

/*
entity Image (Media) {

}
*/

entity Video{
  title String
  uploadDate LocalDate
  mimeType MIMETYPE
  format String
  location String
  length Integer
}

/*
entity Audio (Media) {

}
*/

relationship OneToMany {
  Course{participation} to Participation{course}
  //Course{chapter} to Chapter{course}
  //Chapter{content} to Content{chapter}
}

/**
 * Many to one relationship.
 */
relationship ManyToOne {
  Participation{user(login)} to User
}


//relationship OneToOne {
  /*
    Course to RexDuell
    Course to QuestionPool
    Course to ContentPool
    Course to Tur
  */
//}



dto * with mapstruct
service Course with serviceClass
// service Person, Participation with no
service Media, Video with serviceClass

microservice Course, Participation with CourseService
microservice Media, Video with MediaService


/**
 * The deployment configuration.
 * @author A true hipster
 */
// will be created under 'docker-compose' folder
deployment {
  deploymentType docker-compose
  appsFolders [Gateway, CourseService, MediaService]
  dockerRepositoryName "itrex"
}

// will be created under 'kubernetes' folder
deployment {
  deploymentType kubernetes
  appsFolders [Gateway, CourseService, MediaService]
  dockerRepositoryName "itrex"
}